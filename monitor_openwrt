#!/usr/bin/env perl
use warnings;
use strict;
#
#
#

use LWP::UserAgent;
use Getopt::Long 2.33 qw(:config gnu_getopt no_auto_abbrev);
use Pod::Usage;
use JSON;
use IO::File;

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

sub argparser {
    my $option = {
        hostname => "192.168.1.1",
    };
    my @option_list = (
        "hostname|h=s",
        "username|u=s",
        "password|p=s",
    );

    GetOptions($option,@option_list,'man','help|?') or pod2usage(2);
    if ($option->{help} && @option_list) {
        print("List of options:\n");
        print("\t");
        print join(",", @option_list);
        print("\n");
        exit(0);
    }
    pod2usage(-exitstatus => 0, -verbose => 2) if $option->{man};

    return $option;
}

sub jsonrpc_call {
    my $ua = shift;
    my $hostname = shift;
    my $token = shift;
    my $object = shift;
    my $method = shift;
    my %params = @_;

    my $url = 'http://' . $hostname . '/ubus';

    # See https://openwrt.org/docs/techref/ubus Session management
    # for some docs

    my $id = 1; # FIXME

    my $data = {
        jsonrpc => '2.0',
        id => $id,
        method => 'call',
        params => [
            $token,
            $object,
            $method,
            \%params,
        ],
    };

    my $req = HTTP::Request->new(POST => $url);
    $req->content_type('application/x-www-form-urlencoded');
    $req->content(encode_json($data));

    my $res = $ua->request($req);

    if (!$res->is_success()) {
        # We should always get a result
        die("Error with jsonrpc");
    }

    my $result = decode_json($res->content());

    if ($result->{id} != $id) {
        die("Mismatched result id $result->{id} != $id");
    }

    if ($result->{jsonrpc} ne '2.0') {
        die("Unknown jsonrpc version $result->{jsonrpc}");
    }

    if (!defined($result->{result})) {
        die("No result ", Dumper($result));
    }

    return $result->{result};
}

sub login {
    my $ua = shift;
    my $hostname = shift;
    my $username = shift;
    my $password = shift;
 
    my $result = jsonrpc_call(
        $ua, $hostname,
        '00000000000000000000000000000000',
        'session', 'login',
        username => $username,
        password => $password,
    );

    if ($result->[0] != 0) {
       die("Could not login");
    }

    return $result->[1]{ubus_rpc_session};
}

# TODO:
# - this information could also be fetched via ssh
#   /etc/init.d/dsl_control lucistat
#   or
#   /etc/init.d/dsl_control status
#   (depending on which openwrt version)

sub fetch_DSLStatus {
    my $ua = shift;
    my $hostname = shift;
    my $session = shift;

    my $result = jsonrpc_call(
        $ua, $hostname,
        $session,
        'luci-rpc', 'getDSLStatus'
    );

    if ($result->[0] != 0) {
       die("Could not fetch");
    }

    return $result->[1];
}

sub render_log {
    my $db = shift;
    my $filename = shift;

    $db->{timestamp} = time();

    my @fields = qw(
        timestamp
        line_uptime
        data_rate_down
        data_rate_up
        max_data_rate_down
        max_data_rate_up
        latency_down
        latency_up
        line_attenuation_down
        line_attenuation_up
        signal_attenuation_down
        signal_attenuation_up
        noise_margin_down
        noise_margin_up
        actatp_down
        actatp_up
        errors_fecs_far
        errors_fecs_near
        errors_es_far
        errors_es_near
        errors_ses_far
        errors_ses_near
        errors_loss_far
        errors_loss_near
        errors_uas_far
        errors_uas_near
        errors_hec_far
        errors_hec_near
        errors_crc_p_far
        errors_crc_p_near
        errors_crcp_p_far
        errors_crcp_p_near
        annex_s
        line_state_num
        power_mode_num
        atuc_system_vendor_id
        api_version
        firmware_version
        xtse1
        xtse2
        xtse3
        xtse4
        xtse5
        xtse6
        xtse7
        xtse8
    );

    my $fh;
    if ( ! -e $filename ) {
        $fh = IO::File->new($filename, "w");

        my $col = 1;
        for my $field (@fields) {
            $fh->print(sprintf("#column %i %s\n",
                $col++,
                $field,
            ));
        }
        $fh->print("\n");
        $fh->print("#", join(" ",@fields), "\n");
    } else {
        $fh = IO::File->new($filename, "a");
    }

    my @values;
    for my $field (@fields) {
        my $value = $db->{$field};
        if (!defined($value)) {
            $value = '\n';
        }
        push @values, $value;
    }
    $fh->print(join(" ", @values), "\n");
}

sub render_fetch {
    ...
}

sub main {
    my $option = argparser();
    my $cmd = $ARGV[0]||'';

    if ($cmd eq 'suggest') {
        ...
        # TODO:
        # - check if there is a 192.168.1.1 port 80 on the network?
    }
    if ($cmd eq 'config') {
        ...;
        return;
    }

    my $ua = LWP::UserAgent->new();
    # TODO: ua->agent()

    my $session = login(
        $ua,
        $option->{hostname},
        $option->{username}, $option->{password}
    );
    my $db = fetch_DSLStatus($ua, $option->{hostname}, $session);

    if ($cmd eq 'debug') {
        print(Dumper($db));
        return;
    }

    if ($cmd eq 'log') {
        render_log($db, $ARGV[1]);
        return;
    }

    render_fetch($db);
}
unless(caller) {
    main();
}
